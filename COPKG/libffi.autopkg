@import @"version.inc";

#define { toolsets: "v100,v110,v120,v140"; }

configurations {
	UserPlatformToolset {
	    // Needed because autopackage lacks VS2015 support
        	key = "PlatformToolset";
        	choices: ${toolsets};
	};
}

nuget {
	nuspec {
		id = libffi;
		version : ${package-version};
		title: libffi;
		authors: {Anthony Green, Jon Beniston, Bo Thorsen, libffi contributors};
		owners: {CoApp Project, Vincent Povirk};
		licenseUrl: "https://github.com/coapp-packages/libffi/blob/master/LICENSE";
		projectUrl: "http://github.com/coapp-packages/libffi";
		requireLicenseAcceptance:false;
		summary: "libffi (Foreign Function Interface) is a library that allows software to call any function whose interface is known at runtime.";
		description: @"libffi (Foreign Function Interface) is a library that allows software to call any function whose interface is known at runtime.
Homepage: http://sourceware.org/libffi/";
		releaseNotes: "Release of libffi 3.0.10 libraries.";
		copyright: Copyright 2013;
		tags: { libffi, foreign function interface, native, CoApp };

	};

	files {
		include: {
			libffi\libffi\ffi.h,
			..\src\x86\ffitarget.h,
			};

		docs: {
			..\doc\libffi.texi,
			};

		source += {
			..\src\*.c,
			..\src\x86\ffi.c,
		};

		("Win32,x64",${toolsets},"dynamic,static","release,debug") => {
		    [${0},${1},${2},${3}] {
    			lib: { libffi\${0}\${3}\${1}\${2}Library\libffi.lib };
			};
		};

		("Win32,x64",${toolsets},dynamic,"release,debug") => {
		    [${0},${1},${2},${3}] {
    			bin: { libffi\${0}\${3}\${1}\${2}Library\libffi.dll };
    			symbols: { libffi\${0}\${3}\${1}\${2}Library\libffi.pdb };
			};
		};
	};

	targets {
		[dynamic] {
		    Defines += DYNAMIC_LIBFFI;
		};

		Defines += HAS_LIBFFI;
	};
}

